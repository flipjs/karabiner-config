<?xml version="1.0"?>

<root>

<devicevendordef>
<vendorname>APPLE</vendorname>
<vendorid>0x05ac</vendorid>
</devicevendordef>

<devicevendordef>
<vendorname>KBP</vendorname>
<vendorid>0x04d9</vendorid>
</devicevendordef>

<devicevendordef>
<vendorname>HHKB</vendorname>
<vendorid>0x0853</vendorid>
</devicevendordef>

<deviceproductdef>
<productname>MBPRO13R</productname>
<productid>0x025a</productid>
</deviceproductdef>

<deviceproductdef>
<productname>V60</productname>
<productid>0x0112</productid>
</deviceproductdef>

<deviceproductdef>
<productname>PRO2TYPES</productname>
<productid>0x0100</productid>
</deviceproductdef>

<deviceproductdef>
<productname>MJ_TKL</productname>
<productid>0x2011</productid>
</deviceproductdef>

<item>

	<name>Personal Custom Function Layer</name>

	<item>

		<name>Keyboard-specific Bindings</name>

		<item>

			<name>Macbook Pro Internal Keyboard Bindings</name>

			<item>
				<name>Remap Left Control Key to Hyper Key</name>
				<appendix>External keyboard only, Macbook retains its original key function</appendix>
				<device_only>DeviceVendor::APPLE, DeviceProduct::MBPRO13R</device_only>
				<identifier>private.mbpro13r_control_l_to_hyper</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::CONTROL_L,
					KeyCode::COMMAND_L,
					ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L
				</autogen>
			</item>

			<item>
				<name>Remap Right Command Key to Hyper Key</name>
				<appendix>External keyboard only, Macbook retains its original key function</appendix>
				<device_only>DeviceVendor::APPLE, DeviceProduct::MBPRO13R</device_only>
				<identifier>private.mbpro13r_command_r_to_hyper</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::COMMAND_R,
					KeyCode::COMMAND_L,
					ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L
				</autogen>
			</item>

			<item>
				<name>Remap Right Option Key to Meta Key</name>
				<appendix>External keyboard only, Macbook retains its original key function</appendix>
				<device_only>DeviceVendor::APPLE, DeviceProduct::MBPRO13R</device_only>
				<identifier>private.mbpro13r_option_r_to_meta</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::OPTION_R,
					KeyCode::OPTION_L,
					ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L
				</autogen>
			</item>

		</item>

		<item>

			<name>KBP V60 Bindings</name>

			<item>
				<name>Remap Left Control Key to Hyper Key</name>
				<appendix>External keyboard only, Macbook retains its original key function</appendix>
				<device_only>DeviceVendor::KBP, DeviceProduct::V60</device_only>
				<identifier>private.v60_control_l_to_hyper</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::CONTROL_L,
					KeyCode::COMMAND_L,
					ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L
				</autogen>
			</item>

			<item>
				<name>Remap Right Option Key to Hyper Key</name>
				<appendix>External keyboard only, Macbook retains its original key function</appendix>
				<device_only>DeviceVendor::KBP, DeviceProduct::V60</device_only>
				<identifier>private.v60_option_r_to_hyper</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::OPTION_R,
					KeyCode::COMMAND_L,
					ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L
				</autogen>
			</item>

			<item>
				<name>Remap Right Command Key to Meta Key</name>
				<appendix>External keyboard only, Macbook retains its original key function</appendix>
				<device_only>DeviceVendor::KBP, DeviceProduct::V60</device_only>
				<identifier>private.v60_command_r_to_meta</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::COMMAND_R,
					KeyCode::OPTION_L,
					ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L
				</autogen>
			</item>

		</item>

		<item>

			<name>HHKB Pro-2 Type-S Bindings</name>

			<item>
				<name>Remap Right Command Key to Hyper Key</name>
				<appendix>External keyboard only, Macbook retains its original key function</appendix>
				<device_only>DeviceVendor::HHKB, DeviceProduct::PRO2TYPES</device_only>
				<identifier>private.pro2types_option_r_to_hyper</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::COMMAND_R,
					KeyCode::COMMAND_L,
					ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L
				</autogen>
			</item>

			<item>
				<name>Remap Right Option Key to Meta Key</name>
				<appendix>External keyboard only, Macbook retains its original key function</appendix>
				<device_only>DeviceVendor::HHKB, DeviceProduct::PRO2TYPES</device_only>
				<identifier>private.pro2types_command_r_to_meta</identifier>
				<autogen>
					__KeyToKey__
					KeyCode::OPTION_R,
					KeyCode::OPTION_L,
					ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L
				</autogen>
			</item>

		</item>

	</item>

	<item>

		<name>Modifier Bindings</name>

		<item>
			<name>(Hyper) Esc as Power</name>
			<identifier>private.hyper_esc_power</identifier>
			<autogen>__KeyToKey__ KeyCode::ESCAPE,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::VK_CONSUMERKEY_POWER</autogen>
		</item>

		<item>
			<name>(Hyper) Tab as Backspace</name>
			<identifier>private.hyper_tab_backspace</identifier>
			<autogen>__KeyToKey__ KeyCode::TAB,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::DELETE</autogen>
		</item>

		<item>
			<name>(Hyper) Left Control as Delete</name>
			<identifier>private.hyper_control_delete</identifier>
			<autogen>__KeyToKey__ KeyCode::CONTROL_L,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::FORWARD_DELETE</autogen>
		</item>

		<item>
			<name>(Hyper) Left Shift as Capslock</name>
			<identifier>private.hyper_shft_capslock</identifier>
			<autogen>__KeyToKey__ KeyCode::SHIFT_L,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::CAPSLOCK</autogen>
		</item>

		<item>
			<name>(Hyper) Backspace as Delete</name>
			<identifier>private.hyper_backspace_delete</identifier>
			<autogen>__KeyToKey__ KeyCode::DELETE,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::FORWARD_DELETE</autogen>
		</item>

	</item>

	<item>

		<name>Printscreen, Scroll Lock, and Pause-Break Keys</name>

		<item>
			<name>(Hyper) Backslash as Printscreen</name>
			<identifier>private.hyper_printscreen</identifier>
			<autogen>__KeyToKey__ KeyCode::BACKSLASH,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::PC_PRINTSCREEN</autogen>
		</item>

		<item>
			<name>(Hyper) Left Bracket as Scroll Lock</name>
			<identifier>private.hyper_scroll_lock</identifier>
			<autogen>__KeyToKey__ KeyCode::BRACKET_LEFT,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::PC_SCROLLLOCK</autogen>
		</item>

		<item>
			<name>(Hyper) Right Bracket as Pause-Break</name>
			<identifier>private.hyper_pause_break</identifier>
			<autogen>__KeyToKey__ KeyCode::BRACKET_RIGHT,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::PC_PAUSE</autogen>
		</item>

	</item>

	<item>

		<name>Function Keys</name>

		<item>
			<name>(Hyper) Number Row as Function Row</name>
			<identifier>private.hyper_common_function_row</identifier>
			<autogen>__KeyToKey__ KeyCode::KEY_1,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F1</autogen>
			<autogen>__KeyToKey__ KeyCode::KEY_2,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F2</autogen>
			<autogen>__KeyToKey__ KeyCode::KEY_3,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F3</autogen>
			<autogen>__KeyToKey__ KeyCode::KEY_4,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F4</autogen>
			<autogen>__KeyToKey__ KeyCode::KEY_5,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F5</autogen>
			<autogen>__KeyToKey__ KeyCode::KEY_6,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F6</autogen>
			<autogen>__KeyToKey__ KeyCode::KEY_7,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F7</autogen>
			<autogen>__KeyToKey__ KeyCode::KEY_8,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F8</autogen>
			<autogen>__KeyToKey__ KeyCode::KEY_9,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F9</autogen>
			<autogen>__KeyToKey__ KeyCode::KEY_0,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F10</autogen>
			<autogen>__KeyToKey__ KeyCode::MINUS,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F11</autogen>
			<autogen>__KeyToKey__ KeyCode::EQUAL,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::F12</autogen>
		</item>

	</item>

	<item>

		<name>Media and Volume Keys</name>

		<item>
			<name>(Hyper) Semicolon, Single Quote, and Return as Volume Keys</name>
			<identifier>private.hyper_volume_keys</identifier>
			<autogen>__KeyToKey__ KeyCode::SEMICOLON,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::VK_CONSUMERKEY_VOLUME_DOWN</autogen>
			<autogen>__KeyToKey__ KeyCode::QUOTE,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::VK_CONSUMERKEY_VOLUME_UP</autogen>
			<autogen>__KeyToKey__ KeyCode::RETURN,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::VK_CONSUMERKEY_VOLUME_MUTE</autogen>
		</item>

		<item>
			<name>(Hyper) Comma, Dot, and Slash as Media Keys</name>
			<identifier>private.hyper_media_keys</identifier>
			<autogen>__KeyToKey__ KeyCode::COMMA,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::VK_CONSUMERKEY_MUSIC_PREV</autogen>
			<autogen>__KeyToKey__ KeyCode::DOT,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::VK_CONSUMERKEY_MUSIC_NEXT</autogen>
			<autogen>__KeyToKey__ KeyCode::SLASH,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::VK_CONSUMERKEY_MUSIC_PLAY</autogen>
		</item>

	</item>

	<item>

		<name>Navigation Keys</name>

		<item>
			<name>(Hyper) WASD as Arrow Keys</name>
			<identifier>private.hyper_wasd_arrow_keys</identifier>
			<autogen>--KeyToKey-- KeyCode::W,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::CURSOR_UP</autogen>
			<autogen>--KeyToKey-- KeyCode::A,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::CURSOR_LEFT</autogen>
			<autogen>--KeyToKey-- KeyCode::S,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::CURSOR_DOWN</autogen>
			<autogen>--KeyToKey-- KeyCode::D,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::CURSOR_RIGHT</autogen>
		</item>

		<item>
			<name>(Hyper) O and K as Home and End Keys</name>
			<identifier>private.hyper_home_end</identifier>
			<autogen>__KeyToKey__ KeyCode::O,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::HOME</autogen>
			<autogen>__KeyToKey__ KeyCode::K,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::END</autogen>
		</item>

		<item>
			<name>(Hyper) P and L as PageUp and PageDown Keys</name>
			<identifier>private.hyper_pgup_pgdn</identifier>
			<autogen>__KeyToKey__ KeyCode::P,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::PAGEUP</autogen>
			<autogen>__KeyToKey__ KeyCode::L,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::PAGEDOWN</autogen>
		</item>

	</item>

	<item>

		<name>Tilde, Backquote, Pipe, Backslash and Semicolon</name>

		<item>
			<name>(Hyper) Q and E Keys as Tilde and Backquote Keys</name>
			<identifier>private.hyper_tilde_backquote</identifier>
			<autogen>__KeyToKey__ KeyCode::Q,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::BACKQUOTE | ModifierFlag::SHIFT_L</autogen>
			<autogen>__KeyToKey__ KeyCode::E,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::BACKQUOTE</autogen>
		</item>

		<item>
			<name>(Hyper) Z and X Keys as Pipe and Backslash Keys</name>
			<identifier>private.hyper_pipe_backslash</identifier>
			<autogen>__KeyToKey__ KeyCode::Z,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::BACKSLASH | ModifierFlag::SHIFT_L</autogen>
			<autogen>__KeyToKey__ KeyCode::X,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::BACKSLASH</autogen>
		</item>

		<item>
			<name>(Hyper) C Keys as Semicolon Key</name>
			<identifier>private.hyper_semicolon</identifier>
			<autogen>__KeyToKey__ KeyCode::C,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::SEMICOLON</autogen>
		</item>

	</item>

	<item>

		<name>Parenthesis, Curly and Square Brackets Keys</name>

		<item>
			<name>(Hyper) R and T as Parenthesis</name>
			<identifier>private.hyper_parenthesis</identifier>
			<autogen>__KeyToKey__ KeyCode::R,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::KEY_9 | ModifierFlag::SHIFT_L</autogen>
			<autogen>__KeyToKey__ KeyCode::T,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::KEY_0 | ModifierFlag::SHIFT_L</autogen>
		</item>

		<item>
			<name>(Hyper) F and G as Curly Brackets</name>
			<identifier>private.hyper_curly_brackets</identifier>
			<autogen>__KeyToKey__ KeyCode::F,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::BRACKET_LEFT | ModifierFlag::SHIFT_L</autogen>
			<autogen>__KeyToKey__ KeyCode::G,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::BRACKET_RIGHT | ModifierFlag::SHIFT_L</autogen>
		</item>

		<item>
			<name>(Hyper) V and B as Square Brackets</name>
			<identifier>private.hyper_square_brackets</identifier>
			<autogen>__KeyToKey__ KeyCode::V,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::BRACKET_LEFT</autogen>
			<autogen>__KeyToKey__ KeyCode::B,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::BRACKET_RIGHT</autogen>
		</item>

	</item>

	<item>

		<name>Aritmetic Operators</name>

		<item>
			<name>(Hyper) Y as Plus</name>
			<identifier>private.hyper_plus</identifier>
			<autogen>__KeyToKey__ KeyCode::Y,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::EQUAL | ModifierFlag::SHIFT_L</autogen>
		</item>

		<item>
			<name>(Hyper) U as Minus</name>
			<identifier>private.hyper_minus</identifier>
			<autogen>__KeyToKey__ KeyCode::U,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::MINUS</autogen>
		</item>

		<item>
			<name>(Hyper) I as Equal</name>
			<identifier>private.hyper_equal</identifier>
			<autogen>__KeyToKey__ KeyCode::I,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::EQUAL</autogen>
		</item>

		<item>
			<name>(Hyper) H as Asterisk</name>
			<identifier>private.hyper_multiply</identifier>
			<autogen>__KeyToKey__ KeyCode::H,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::KEY_8 | ModifierFlag::SHIFT_L</autogen>
		</item>

		<item>
			<name>(Hyper) J as Slash</name>
			<identifier>private.hyper_divide</identifier>
			<autogen>__KeyToKey__ KeyCode::J,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::SLASH</autogen>
		</item>

	</item>

	<item>

		<name>Extras</name>

		<item>
			<name>(Hyper) N and M as Double and Single Quotes</name>
			<identifier>private.hyper_quotes</identifier>
			<autogen>__KeyToKey__ KeyCode::N,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::QUOTE | ModifierFlag::SHIFT_L</autogen>
			<autogen>__KeyToKey__ KeyCode::M,
				ModifierFlag::COMMAND_L | ModifierFlag::OPTION_L | ModifierFlag::SHIFT_L | ModifierFlag::CONTROL_L,
				KeyCode::QUOTE</autogen>
		</item>

	</item>

</item>

</root>
